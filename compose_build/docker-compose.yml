# docker-compose build && docker-compose up -d
# If "docker-compose logs ckan" shows DB not ready, run "docker-compose restart ckan" a few times.
version: "3"

volumes:
  pycsw_config:
  ckan_storage:
  pg_data:
  solr_core_data:

services:
  ckan: &ckan_app
    image: ioos/catalog-docker-base
    user: root
    container_name: ckan
    restart: always
    ports:
      - "0.0.0.0:5000:5000"
    environment:
      # Defaults work with linked containers, change to use own Postgres, SolR, Redis or Datapusher
      - POSTGRES_PASSWORD=changeme
      - CKAN_SQLALCHEMY_URL=postgresql://ckan:changeme@db/ckan
      - CKAN_DB_PASSWORD=changeme
      - SECRET_KEY=
      # TODO: the section of check_plugins.bash that reviews the plugins is
      # likely redundant with this new envvar
      # Keitaro CKAN image also allows for postinstall hooks, which may
      # be worthwhile investigating
      - CKAN__PLUGINS=envvars image_view text_view recline_view ckan_harvester csw_harvester dcat dcat_json_harvester dcat_json_interface dcat_rdf_harvester harvest ioos_theme spatial_metadata spatial_query structured_data waf_harvester
      - CKAN_SOLR_URL=http://solr:8983/solr/ckan
      - CKAN_REDIS_URL=redis://redis:6379/1
      # Enable on production. Missing keys on dev cause issues starting container
      - GA_ENABLED=false
    depends_on:
      - db
      - redis
      - solr

    volumes:
      - pycsw_config:/etc/pycsw
      - ckan_storage:/var/lib/ckan
    healthcheck:
      test: curl --fail localhost:5000 || exit 1
      timeout: 25s
    command: ckan -c /srv/app/production.ini run --host 0.0.0.0

  ckan_gather_harvester:
     <<: *ckan_app
     container_name: ckan_gather_harvester
     command: ckan -c /srv/app/production.ini harvester gather-consumer
     ports: []
     depends_on:
       - ckan
     healthcheck:
       disable: true

  ckan_fetch_harvester:
     <<: *ckan_app
     container_name: ckan_fetch_harvester
     command: ckan -c /srv/app/production.ini harvester fetch-consumer
     ports: []
     depends_on:
       - ckan
     healthcheck:
       disable: true

  pycsw:
    container_name: pycsw_gmd_hotfix
    image: geopython/pycsw:latest
    restart: always
    stdin_open: true
    tty: true
    volumes:
      - pycsw_config:/etc/pycsw
    environment:
      - PYCSW_CONFIG=/etc/pycsw/pycsw.cfg
    ports:
      - "8000:8000"
    depends_on:
      - db

  db:
    container_name: db
    image: postgis/postgis:12-3.4-alpine
    restart: always
    environment:
      - POSTGRES_PASSWORD=changeme
      - CKAN_DB=ckan
      - CKAN_DB_USER=ckan
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  solr:
    container_name: solr
    image: ckan/ckan-solr:2.10-solr9-spatial
    restart: always
    environment:
      # note, SOLR_CONFIG_DIR="/opt/solr/server/solr/configsets" by default
      # TODO: possibly use .env interpolation here instead?
      - SOLR_CONFIG_DIR=/opt/solr/server/solr/configsets
      - SOLR_SCHEMA_FILE=/opt/solr/server/solr/configsets/ckan/conf/schema.xml
    volumes:
      - solr_core_data:/opt/solr/server/solr/ckan
      # could also do Dockerfile COPY here
      - ../contrib/solr/schema.xml:/opt/solr/server/solr/configsets/ckan/conf/schema.xml
    ports:
      - "8983:8983"

  redis:
    container_name: redis
    image: redis:latest
    restart: always

  autoheal:
    restart: always
    image: willfarrell/autoheal
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    volumes:
       - /var/run/docker.sock:/var/run/docker.sock
