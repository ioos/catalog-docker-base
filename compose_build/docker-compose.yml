# docker-compose build && docker-compose up -d
# If "docker-compose logs ckan" shows DB not ready, run "docker-compose restart ckan" a few times.
version: "3"

volumes:
  ckan_config:
  pycsw_config:
  ckan_storage:
  pg_data:
  solr_core_data:

services:
  ckan: &ckan_app
    image: ioos/catalog-docker-base
    #image: ioos/ckan:2.9.1
    #build:
    #  context: .
    user: root
    container_name: ckan
    ports:
      - "0.0.0.0:${CKAN_PORT}:5000"
    environment:
      # Defaults work with linked containers, change to use own Postgres, SolR, Redis or Datapusher
      #- CKAN_SQLALCHEMY_URL=postgresql://ckan:${POSTGRES_PASSWORD}@db/ckan
      - CKAN_SQLALCHEMY_URL=postgresql://ckan:mLoon#hierophant@db/ckan
      # does not work due to firewall
      #- CKAN_SQLALCHEMY_URL=postgresql://ckan:${POSTGRES_PASSWORD}@catalog-postgres-96-recreate.cbrwdtgt60un.us-east-1.rds.amazonaws.com/ckan 
      # datapusher URL required even though not used.
      - CKAN_DATAPUSHER_URL=http://datapusher:8800
      - CKAN_DATASTORE_WRITE_URL=postgresql://ckan:${POSTGRES_PASSWORD}@db/datastore
      - CKAN_DATASTORE_READ_URL=postgresql://datastore_ro:${DATASTORE_READONLY_PASSWORD}@db/datastore
      - CKAN_SOLR_URL=http://solr:8983/solr/ckan
      - CKAN_REDIS_URL=redis://redis:6379/1
      - CKAN_SITE_URL=${CKAN_SITE_URL}
      - CKAN_MAX_UPLOAD_SIZE_MB=${CKAN_MAX_UPLOAD_SIZE_MB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
      - GA_ENABLED=false

    volumes:
      #- /home/badams/devel/catalog-ckan/ckanext/ioos_theme/:/usr/lib/ckan/venv/src/ckanext-ioos-theme/ckanext/ioos_theme/
      - ckan_config:/etc/ckan
      - pycsw_config:/etc/pycsw
      - ckan_storage:/var/lib/ckan
    #command: ckan --plugin=ckan serve /etc/ckan/production.ini
    #command: ckan-paster --plugin=ckan serve /etc/ckan/production.ini
    #command: ckan -c /etc/ckan/production.ini run --host 0.0.0.0
    #entrypoint: sleep 999999
    #command: sleep 9999

  ckan_gather_harvester:
     <<: *ckan_app
     container_name: ckan_gather_harvester
     command: ckan -c /etc/ckan/production.ini harvester gather-consumer
     ports: []
     depends_on:
       - ckan

  ckan_fetch_harvester:
     <<: *ckan_app
     container_name: ckan_fetch_harvester
     command: ckan -c /etc/ckan/production.ini harvester fetch-consumer
     ports: []
     depends_on:
       - ckan

  pycsw:
    container_name: pycsw_gmd_hotfix
    image: geopython/pycsw:latest
    stdin_open: true
    tty: true
    volumes:
      - pycsw_config:/etc/pycsw
    environment:
      - PYCSW_CONFIG=/etc/pycsw/pycsw.cfg
    ports:
      - "8000:8000"
    depends_on:
      - db

  db:
    container_name: db
    build:
      context: ../main_ckan_docker/
      dockerfile: contrib/docker/postgresql/Dockerfile
      args:
        - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    environment:
      - DS_RO_PASS=${DATASTORE_READONLY_PASSWORD}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  solr:
    container_name: solr
    build:
      context: ../main_ckan_docker/
      #context: ../../
      dockerfile: contrib/docker/solr/Dockerfile
    volumes:
      - solr_core_data:/opt/solr/server/solr/ckan
    ports:
      - "8983:8983"

  redis:
    container_name: redis
    image: redis:latest
